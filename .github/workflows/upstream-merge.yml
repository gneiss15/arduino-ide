name: Merge upstream/main into local main
on:
  schedule:
    - cron: '0 3 * * *'  # t√§glich um 03:00 UTC
  workflow_dispatch:
jobs:
  merge-upstream:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # wichtig, damit git alle Commits kennt
    - name: Set up Git
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
    - name: Add upstream remote
      run: |
        git remote add upstream https://github.com/arduino/arduino-ide.git
        git fetch upstream
    - name: Check for relevant changes (skip merge if only .github/ etc.)
      id: Check
      run: |
        git checkout main
        git fetch upstream
        #ROOT_FILES=$(grep -Ev '^\.github/|^\.git/|^[^/]+$')
        BASE=$(git merge-base HEAD upstream/main)
        DIFF_FILES=$(git diff --name-only $BASE upstream/main | grep -Ev '^(\.github/|\.git/|^[^/]+$)' || true)
        echo "DIFF_FILES: $DIFF_FILES"
        if [ -z "$DIFF_FILES" ]; then
          echo "‚ùå Only ignored files changed. Exiting."
          echo "skip=true" >> $GITHUB_OUTPUT
         else
          echo "‚ùé Relevant files changed."
          echo "skip=false" >> $GITHUB_OUTPUT
        fi
    - name: Merge upstream/main into local main
      if: steps.Check.outputs.skip == 'false'
      run: |
        git merge upstream/main --no-edit
      continue-on-error: true  # erlaubt Fehler z.‚ÄØB. bei Konflikten
    - name: Check for merge conflicts
      if: steps.Check.outputs.skip == 'false'
      run: |
        if git ls-files -u | grep .; then
          echo "‚ùå Merge conflicts detected!"
          exit 1
        fi
        echo "‚úÖ No merge conflicts"
    - name: Install GitHub CLI
      if: ${{ success() && steps.Check.outputs.skip == 'false' }}
      run: sudo apt-get install gh -y
    - name: Create branch, push and open PR
      if: ${{ success() && steps.Check.outputs.skip == 'false' }}
      env:
        GH_TOKEN: ${{ secrets.PAT }}
      run: |
        # üü¢ Option 1: Direkt pushen (Standard)
        #git push origin main

        # üü° Option 2: PR statt direktem Merge (kommentieren, falls gew√ºnscht)
        #echo $GH_TOKEN | gh auth login --with-token
        BRANCH="upstream-merge-$(date +%s)"
        git checkout -b $BRANCH
        git push origin $BRANCH
        gh pr create --title "Merge from upstream" --body "Automatisch erstellter PR" --base main --head $BRANCH
    - name: Trigger BuildLinux workflow
      if: ${{ false && success() && steps.Check.outputs.skip == 'false' }}
      uses: benc-uk/workflow-dispatch@v1
      with:
        workflow: LinuxBuild.yml
        ref: main
        token: ${{ secrets.PAT }}
       
