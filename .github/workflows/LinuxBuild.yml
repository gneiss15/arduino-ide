name: Arduino2 IDE (Linux-AppImage-Build)
on:
  push:
  workflow_dispatch:
env:
  NODE_VERSION: '18.17'
  YARN_VERSION: '1.22'
  GO_VERSION: '1.21'
  GH_TOKEN: ${{ github.token }}
jobs:
  build:
    name: build Linux
    runs-on: ubuntu-latest
    container: { "image": "ghcr.io/arduino/arduino-ide/linux:main" }
    defaults:
      run:
        shell: bash
    timeout-minutes: 90
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
    - name: Install Yarn
      run: npm install --global "yarn@${{ env.YARN_VERSION }}"
    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false
    - name: Install Taskfile
      uses: arduino/setup-task@v2
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        version: 3.x
    - name: Package
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      working-directory: './'
      run: |
        set -x
        set -v
        npx node-gyp install
        yarn install
        yarn --cwd arduino-ide-extension build
        yarn --cwd electron-app rebuild
        yarn --cwd electron-app build
        yarn --cwd electron-app package
        find / -iname "*.AppImage"
        cp /__w/arduino-ide/arduino-ide/electron-app/dist/*.AppImage .
    - name: Mod AppImage to use chrome-sandbox of local os
      run: |
        set -x
        set -v
        EXE=$(readlink -f *.AppImage)
        chmod a+x "${EXE}"
        mkdir t
        cd t
        "${EXE}" --appimage-extract
        cd squashfs-root/
        rm chrome-sandbox
        ln -s /opt/google/chrome/chrome-sandbox chrome-sandbox
        cd ..
        TOOL=".github/tools/appimagetool-x86_64_2019-05-01.AppImage"
        ARCH=x86_64 ${TOOL} squashfs-root
        rm -r squashfs-root/
        rm "${EXE}"
        mv *.AppImage ../
        cd ..
        rm -r t
    - name: Install gh and jq
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      working-directory: './'
      run: |
        set -x
        set -v
        mkdir -p /etc/apt/keyrings/
        mkdir -p /etc/apt/sources.list.d/
        cp .github/tools/githubcli-archive-keyring.gpg /etc/apt/keyrings/githubcli-archive-keyring.gpg
        cp .github/tools/github-cli.sources /etc/apt/sources.list.d/github-cli.sources
        apt update
        apt install -y gh jq
    - name: Upload to GitHub Releases
      run: |
        set -x
        set -v
        TAG_List=$(gh release list -R "$GITHUB_REPOSITORY" --json tagName | jq -r 'map(select(true))[] | (.tagName)')
        TAG="$(date +%Y%m%d)"
        for i in $TAG_List; do
          if [ "$i" = "$TAG" ]; then
            gh release delete "$TAG" -y
          fi
        done
        OLDFN=$(ls *.AppImage)
        NEWFN=$(sed -e s/snapshot[^_]*/$TAG-GN/g <<<$OLDFN)
        mv $OLDFN $NEWFN
        gh release create "$TAG" "$NEWFN" --title "$TAG"

